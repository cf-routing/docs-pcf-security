---
title: TLS Connections in PCF
owner: Security
---

This topic classifies the different paths through which external clients, internal components, app containers, and app services communicate in Pivotal Cloud Foundry (PCF), and how the platform uses Transport Layer Security (TLS) protocols to secure these communications.

## <a id="tls-types"></a> Types of Network Communication in PCF

This section classifies the different types of network communication in PCF and how they are secured with TLS.

Within a PCF deployment, TLS secures connections between components like the BOSH Director and service tiles. PCF components also use TLS connections to secure communications with external hardware, such as customer load balancers.

### <a id="client-to-app"></a> Between an External Client and an App

The following diagram illustrates the flow of communication from a client making a request to an app: 

<%= image_tag("../images/ingress-traffic.png", :class => "no-border") %>
[//]: https://docs.google.com/drawings/d/1gMYrcGpr-srWAv-ZvCs-9UHaV0JG2jpbre5cG2XoLRg/edit?usp=sharing

The following table describes each component involved in receiving a client request and 
where their certificates for TLS termination originate.

<table>
  <tr>
    <th style="width: 30%">Component</th>
    <th>Certificate Source</th>
  </tr>
  <tr>
    <td>External Load Balancer</td>
    <td>Enterprise Root CA.</td>
  </tr>
  <tr>
    <td>Gorouter</td>
    <td>Enterprise Root CA.</td>
  </tr>
  <tr>
    <td>App</td>
    <td>PCF root CA dedicated to app instance identity. For more information, see <a href="#container-creds">App Instance Container Identity Credentials</a>.</td>
  </tr>
</table>

###  <a id="component-to-component"></a> Between Platform Components

The following diagram illustrates communication between platform components, secured with TLS. 

<%= image_tag("../images/platform-components.png", :class => "no-border") %>
[//]: https://docs.google.com/drawings/d/1Nr9dRH72PphVq_iW23yceqq2lzrR4mGvpWdTItTQuqU/edit?usp=sharing

The CredHub instance in BOSH generates certificates for all components in PCF. The certificates are self signed by default. To issue certificates signed by your enterprise, you can add a custom CA to CredHub.

#### <a id="components"></a> Component Communication Details

The following topics list the paths, ports, and protocols that subsystems within Pivotal Application Service (PAS) use to communicate.

* [Cloud Controller Network Communications](/pivotalcf/security/networking/cc-network-paths.html)

* [Diego Network Communications](/pivotalcf/security/networking/diego-network-paths.html)

* [Loggregator Network Communications](/pivotalcf/security/networking/loggregator-network-paths.html)

* [MySQL Network Communications](/pivotalcf/security/networking/mysql-network-paths.html)

* [NATS Network Communications](/pivotalcf/security/networking/nats-network-paths.html)

* [Routing Network Communications](/pivotalcf/security/networking/routing-network-paths.html)

* [UAA Network Communications](/pivotalcf/security/networking/uaa-network-paths.html)

### <a id="app-to-app"></a> Between Apps

The following diagram illustrates TLS communications between apps running on PCF. In this example, the `frontend-blue` and `frontend-green` apps both receive client requests, but only the `frontend-green` app is allowed to communicate with the `backend` app. 

<%= image_tag("../images/between-app-traffic.png", :class => "no-border") %>
[//]: https://docs.google.com/drawings/d/1h4x8vNf2xiCZMVpFLb11Dx-PmMmcYOMWBHAHfbzNbUQ/edit?usp=sharing

Apps can communicate with each other over TLS using certificates generated by a PCF root CA dedicated to app instance identity. For more information, see <a href="#container-creds">App Instance Container Identity Credentials</a>.

Developers specify which apps are allowed to communicate using container networking policies. For more information, see [Configuring Container-to-Container Networking](https://docs.pivotal.io/application-service/<%= product_info['local_product_version'].to_s.sub('.','-') %>/devguide/deploy-apps/cf-networking.html).

###  <a id="app-to-service"></a> Between Apps and On-Platform Services

The following diagram illustrates TLS communication between apps and managed, on-platform services. It uses Pivotal Cloud Cache as an example of a managed service. 

<%= image_tag("../images/apps-services.png", :class => "no-border") %>
[//]: https://docs.google.com/drawings/d/16WDbrSCLR9-avP0-DvnsJHwDG3tc8vMJTNiU-6rFLNo/edit?usp=sharing

BOSH CredHub issues certificates to the Pivotal Cloud Cache components. For the app, the developer must retrieve a copy of this certificate using the CredHub API and place it in the truststore for the app. For more information, see the [Developing an App Under TLS](https://docs.pivotal.io/p-cloud-cache/tls-enabled-app.html) document in the Pivotal Cloud Cache documentation. 

Separately, PAS Runtime CredHub might store credentials for the app to access a service over the TLS connection, adding a second layer of security. For more information, see [Securing Services Instance Credentials with Runtime CredHub](https://docs.pivotal.io/pivotalcf/<%= product_info['local_product_version'].to_s.sub('.','-') %>/opsguide/secure-si-creds.html).

###  <a id="app-to-external-service"></a> Between Apps and External Services

The following diagram illustrates communications between apps and external, brokered services secured with TLS. 

<%= image_tag("../images/apps-external-services.png", :class => "no-border") %>
[//]: https://docs.google.com/drawings/d/1pUQUeC9_XBq_wTJu6Ws0vPTPO8Xz4FQfqj5PRflQ5_M/edit?usp=sharing

The developer must retrieve the certificate from the external service and provide it to their app. One way to do this is by placing the certificate in Runtime CredHub and modifying your app to consume the certificate through the [CredHub Service Broker for PCF](https://docs.pivotal.io/credhub-service-broker/).

## <a id="container-creds"></a> App Instance Container Identity Credentials

Each app instance container in PCF has its own identity credentials. This section is meant to help PCF operators and developers [understand](#cred-details) and [use](#use-creds) these credentials. 

### <a id="cred-details"></a> About App Instance Identity Credentials

See the following table to learn about app instance identity credentials.

<table>
  <tr>
    <th style="width: 20%">Attribute</th>
    <th>Description</th>
  </tr>
  <tr>
    <th>Purpose</th>
    <td>
        <ul>
          <li>For app developers to enable secure TLS communications from their apps.</li>
          <li>For PCF to use internally to validate the identities of app instances.</li>
        </ul>
    </td>
  </tr>
  <tr>
    <th>Type</th>
    <td>
      <ul>
        <li>
          A PEM-encoded <a href="https://tools.ietf.org/html/rfc5280">X.509</a> certificate and <a href="https://tools.ietf.org/html/rfc3447">PKCS #1 RSA</a> private key. 
        </li>
      </ul>
    </td>
  </tr>
  <tr>
    <th>Location</th>
    <td>
        <ul>
          <li>PCF presents the certificate and private key to the app instance through the container filesystem. </li>
        </ul>
    </td>
  </tr>
  <tr>
    <th>Properties of certificate</th>
    <td>
        <ul>
          <li>The <b>Common Name</b> is the app instance GUID.</li>
          <li>The <b>Subject</b> of the certificate contains an <i>Organizational Unit</i> in the form of <code>app:APP-GUID</code>.</li>
          <li>The certificate contains a <b>Subject Alternative Name</b> (SAN) with the IP address for the app instance container.</li>
          <li>The certificate is valid for 24 hours after being issued.</li>
        </ul>
    </td>
  </tr>
  <tr>
    <th>Contents of certificate file</th>
    <td>
        <ul>
          <li>A chain of PEM-encoded certificates, with the instance-specific certificate first in the list and any intermediates following it.</li>
        </ul>
    </td>
  </tr>
  <tr>
    <th>Issuing authority</th>
    <td>
        <ul>
          <li>PCF includes a root Certificate Authority (CA) dedicated to app instance identity. This CA is saved in the system trust store for buildpack-based apps and in a file in <code>/etc/cf-system-certificates</code> in all app instance containers.</li>
        </ul>
    </td>
  </tr>
</table>

### <a id="use-creds"></a> Using the Credentials

If you want to enable secure TLS communications from an app using container instance identity credentials, ensure that you do the following:

* **Add the credentials to your development stack configuration:** 
  * The credentials must be present in your development stack configuration for your app to use them. You can retrieve the credentials through following environment variables, which PCF sets to the locations of key and certificate files.
        <table id='instance-certs' border="1" class="nice" >
          <tr>
            <th>Credential / Keypair Element</th>
            <th>Environment Variable</th>
            <th>Command to Retrieve Credential Value</th>
          </tr><tr>
            <td>Certificate Chain</td>
            <td><code>CF_INSTANCE_CERT</code></td>
            <td><code>cf ssh APP-NAME -c 'cat $CF_INSTANCE_CERT'</code></td>
          </tr><tr>
            <td>Private Key</td>
            <td><code>CF_INSTANCE_KEY</code></td>
            <td><code>cf ssh APP-NAME -c 'cat $CF_INSTANCE_KEY'</code></td>
          </tr>
        </table>

* **Reload the credential files before they expire:** 
  * PCF rotates the credentials shortly before the current certificate expires. Apps that use these credentials must reload the certificate and key file contents either periodically or in reaction to filesystem watcher events.
 
* **Configure external clients or servers to trust the root CA:**
  * To enable secure TLS communication between an app and a client or server external to PCF, you must configure the external client or server to trust the CA that issues app instance container identity credentials. See the _Issuing Authority_ row of the table in [About App Instance Identity Credentials
](#cred-details).

### <a id="more-info"></a> Additional Information

For more information about instance identity credentials, see the [Instance Identity](https://github.com/cloudfoundry/diego-release/blob/develop/docs/instance-identity.md) document in the diego-release repository.

## <a id="ciphers"></a> TLS Cipher Suites

By default, PCF uses a limited set of cipher suites to secure its internal communications. However, some components used in PCF, like the Gorouter and HAProxy, may support additional TLS cipher suites to accommodate older clients outside of PCF. 

<p class="note">The AWS Classic load balancer does not support the recommended TLS cipher suites. See <a href="https://docs.pivotal.io/pivotalcf/<%= product_info['local_product_version'].to_s.sub('.','-') %>/adminguide/securing-traffic.html#ciphers">Securing Traffic into Cloud Foundry</a> for details and mitigations.</p>

For components that allow you to configure TLS cipher suites, only specify the TLS cipher suites that you need.

### <a id="cipher_recs"></a> TLS Cipher Suite Recommendations

The default and recommended version of TLS to use is TLS v1.2.

The recommended TLS cipher suites to use within PCF are the following:

* TLS\_DHE\_RSA\_WITH\_AES\_128\_GCM\_SHA256
* TLS\_DHE\_RSA\_WITH\_AES\_256\_GCM\_SHA384
* TLS\_ECDHE\_RSA\_WITH\_AES\_128\_GCM\_SHA256
* TLS\_ECDHE\_RSA\_WITH\_AES\_256\_GCM\_SHA384

### <a id="cipher_gorouter"></a> Gorouter Configuration

As part of your PAS networking configuration, you must specify the TLS cipher suites that the Gorouter uses to secure its communications. Only specify the cipher suites that you need.

The recommended TLS cipher suites for the Gorouter are:

* ECDHE-RSA-AES128-GCM-SHA256
* ECDHE-RSA-AES256-GCM-SHA384

You can specify other cipher suites and a different minimum version of TLS support if your deployment requires it. For a list of other cipher suites and other versions of TLS that are optionally supported by the Gorouter, see [Securing Traffic into Cloud Foundry](https://docs.pivotal.io/pivotalcf/<%= product_info['local_product_version'].to_s.sub('.','-') %>/adminguide/securing-traffic.html#ciphers).

<p class='note'><strong>Note:</strong> In PAS v2.3, traffic between the Gorouter and Cloud Controller is encrypted. To ensure there is no downtime while upgrading from v2.2 to v2.3, download the latest patch for v2.2. This patch contains the configuration <code>router.backends.enable_tls: true</code> in the Gorouter manifest.</p>

### <a id="cipher_haproxy"></a> HAProxy Configuration

As part of your PAS networking configuration, you must specify the TLS cipher suites that HAProxy uses to secure its communications. Only specify the cipher suites that you need.

The recommended TLS cipher suites for HAProxy are:

<ul>
  <li>DHE-RSA-AES128-GCM-SHA256</li>
  <li>DHE-RSA-AES256-GCM-SHA384</li>
  <li>ECDHE-RSA-AES128-GCM-SHA256</li>
  <li>ECDHE-RSA-AES256-GCM-SHA384</li>
</ul>

You can specify other cipher suites and a different minimum version of TLS support if your deployment requires it. For a list of other cipher suites and other versions of TLS that are optionally supported by HAProxy, see [ciphers - Cipher Suite Names](https://www.openssl.org/docs/man1.0.2/apps/ciphers.html#CIPHER-SUITE-NAMES) in the OpenSSL documentation.

If you use the default and recommended Gorouter TLS cipher suites in PAS, then ensure you have included these Gorouter TLS cipher suites in your HAProxy TLS cipher suite configuration.

If you change the default Gorouter TLS cipher suites in PAS, and you change the TLS cipher suites for HAProxy, ensure that you have at least one overlapping TLS cipher suite within the two sets.

For instructions to configure the TLS cipher suites for HAProxy, see the PAS installation documentation for the IaaS of your deployment. For example, if you are deploying PAS on GCP, see [Step 6: Configure Networking](https://docs.pivotal.io/pivotalcf/<%= product_info['local_product_version'].to_s.sub('.','-') %>/customizing/gcp-er-config.html#networking).
